if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
values2 <- strsplit(x = x, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values2)
typeof(values2)
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
emoticonDetector <- function() {
# grep() - search for matches to argument pattern
emoticonPattern <- "<U\\+[a-zA-Z0-9]*>"
ed <- "<ed>"
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
# values <- grep(pattern = pattern, x = x, value = TRUE)
a <- grepl(pattern = emoticonPattern, x = x)
if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
values2 <- strsplit(x = values1, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values2)
typeof(values2)
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
emoticonDetector <- function() {
# grep() - search for matches to argument pattern
emoticonPattern <- "<U\\+[a-zA-Z0-9]*>"
ed <- "<ed>"
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
# values <- grep(pattern = pattern, x = x, value = TRUE)
a <- grepl(pattern = emoticonPattern, x = x)
if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
values2 <- strsplit(x = values1, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values1)
typeof(values1)
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
emoticonDetector <- function() {
# grep() - search for matches to argument pattern
emoticonPattern <- "<U\\+[a-zA-Z0-9]*>"
ed <- "<ed>"
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
# values <- grep(pattern = pattern, x = x, value = TRUE)
a <- grepl(pattern = emoticonPattern, x = x)
if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
# values2 <- strsplit(x = values1, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values1)
typeof(values1)
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
emoticonDetector <- function() {
# grep() - search for matches to argument pattern
emoticonPattern <- "<U\\+[a-zA-Z0-9]*>"
ed <- "<ed>"
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
# values <- grep(pattern = pattern, x = x, value = TRUE)
a <- grepl(pattern = emoticonPattern, x = x)
if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
# values2 <- strsplit(x = values1, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values1)
typeof(values1)
for (i in values1) {
values2 <- strsplit(x = i, split = "><")
print(values1)
}
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
emoticonDetector <- function() {
# grep() - search for matches to argument pattern
emoticonPattern <- "<U\\+[a-zA-Z0-9]*>"
ed <- "<ed>"
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
# values <- grep(pattern = pattern, x = x, value = TRUE)
a <- grepl(pattern = emoticonPattern, x = x)
if (a) {
b <- grepl(pattern = ed, x = x)
if (b) {
values1 <- strsplit(x = x, split = "<ed>")
# values2 <- strsplit(x = values1, split = "><")
# values3 <- substr(values2, 2, nchar(values2)-1)
print(values1)
typeof(values1)
for (i in values1) {
values2 <- strsplit(x = i, split = "><")
print(values2)
}
}
}
# ---------------------------------------------
# values <- gsub(pattern, "replacement", x, ignore.case = FALSE, perl = FALSE,
#    fixed = FALSE, useBytes = FALSE)
# print(values[1])
# print(values[2])
# values1 <- gsub("<ed>", "", values[2], ignore.case = FALSE, perl = FALSE,
# fixed = FALSE, useBytes = FALSE)
# print(values1)
# values2 <- strsplit(x = values[2], split = "<ed>")
# values3 <- substr(values2, 2, nchar(values2)-1)
# print(values3)
# print(values2[1])
}
emoticonDetector()
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
stringr::str_replace(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
stringr::str_replace(fruits, "[aeiou]", "-")
stringr::str_replace_all(fruits, "[aeiou]", "-")
x <- "Give me chocolate and nobody gets hurt! <ed><U+00A0><U+00BD><ed><U+00B8><U+0082> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> <ed><U+00A0><U+00BC><ed><U+00BD><U+00AB> UpVee <ed><U+00A0><U+00BD><ed><U+00B1><U+0080> http://bit.ly/2kjXMKe"
stringr::str_replace_all(string = x, pattern = [><], replacement = "")
stringr::str_replace_all(string = x, pattern = "[><]", replacement = "")
stringr::str_replace_all(string = x, pattern = "<ed>", replacement = "")
stringr::str_replace_all(string = x, pattern = "[><]", replacement = " ")
filtered <- stringr::str_replace_all(string = x, pattern = "[><]", replacement = " ")
tokenizers::tokenize_words(x = filtered, lowercase = TRUE, stopwords = NULL, simplify = FALSE)
shiny::runApp('R')
shiny::runApp()
shiny::runApp('R')
packageVersion('plot')
packageVersion('graphics')
runApp('R')
plot(1:12, type = "b", main = "'fg' : axes, ticks and box in gray",
fg = gray(0.7), bty = "7" , sub = R.version.string)
plot(1:12, type = "s", main = "'fg' : axes, ticks and box in gray",
fg = gray(0.7), bty = "7" , sub = R.version.string)
barplot(rbind(nr.prof))
x = data.frame("giraffes", "orangutans", "monkeys")
y = c(20, 14, 23)
df = data.frame(x, y)
barplot(x)
nr.prof <-
c(prof.pilots = 16, lawyers = 11, farmers = 10, salesmen = 9, physicians = 9,
mechanics = 6, policemen = 6, managers = 6, engineers = 5, teachers = 4,
housewives = 3, students = 3, armed.forces = 1)
nr.prof
barplot(rbind(nr.prof))
runApp('R')
shiny::runApp('R')
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
listFunction(1, 2, 3, 4, 5)
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
listFunction(1, 2, 3, 4, 5, 6)
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList)
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[1])
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[0])
print(getList[1])
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[1])
print(getList[2])
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
sample <- c(a = 0, b = 1, c = 3)
sample$a
sample[[0]]
sample
sample[0]
sample[0][[0]]
sample[1]
sample[1][[1]]
sample[2][[1]]
finalJoy <- c(count = c(weight = 0, low = 0.2, nuetral = 0.4, high = 0.6, higher = 0.8, highest = 1.0), count = c(weight = 1, low = 2, nuetral = 3, high = 4, higher = 5, highest = 6))
finalJoy
finalJoy$count
finalJoy$count[1]
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
finalJoy
finalJoy$count.lowest
finalJoy[1]
finalJoy[2]
finalJoy[7]
finalJoy[[1]]
finalJoy[[2]]
count.higher
finaJoy.count
finaJoy$count
finaJoy[1]
finalJoy$count
finalJoy$lowest
finalJoy$count
finalJoy[1]
finalJoy[2]
finalJoy <- c(count <- c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight <- c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
finalJoy
finalJoy[1]
finalJoy[7]
finalJoy[8]
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
finalJoy$count
finalCountJoy <- c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0)
finalWeightJoy <- c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0)
finalCountJoy
finalCountJoy$lowest
finalCountJoy[1]
finalCountJoy[lowest]
finalCountJoy["lowest"]
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
finaJoy["count"]
finalJoy["count"]
finalJoy
finalJoy[count]
finalJoy[count][lowest]
finalJoy[count]["lowest"]
finalJoy[count]$lowest
finalJoy[count][[lowest]]
finalJoy[count][["lowest"]]
finalJoy[count][lowest]
finalJoy["count.low"]
finalJoy["count.low"][1]
finalJoy["count.low"][[1]
]
finalJoy[count]
# returns and access list from function
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
print(finalJoy)
finalJoy[count]
finalJoy[weight]
finalJoy["count.low"]
finalJoy[count]
# returns and access list from function
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
print(finalJoy)
finalJoy[count]
finalJoy[weight]
finalJoy["count.low"]
finalJoy["count.highest"]
# returns and access list from function
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
print(finalJoy)
finalJoy[count]
finalJoy[weight]
finalJoy["count.low"]
finalJoy["count.highest"]
finalJoy["weight.low"]
finalJoy["weight.highest"]
tempFear <- c(
count = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0),
weight = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0)
)
tempFear
tempFear[count]
tempFear["count"]
tempFear["count.lowest"]
tempFear[count]
tempFear["count.lowest"]
tempFear["count.lowest"]
# returns and access list from function
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
print(finalJoy)
finalJoy[count]
finalJoy[weight]
finalJoy["count.low"]
finalJoy["count.highest"]
finalJoy["weight.low"]
finalJoy["weight.highest"]
finalJoy <- 0
finalJoy
# returns and access list from function
listFunction <- function(a, b, c, d, e, f) {
a <- a + 1
b <- b + 1
c <- c + 1
d <- d + 1
e <- e + 1
f <- f + 1
c(a, b, c, d, e, f)
}
getList <- listFunction(1, 2, 3, 4, 5, 6)
print(getList[2])
finalJoy <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
print(finalJoy)
finalJoy[count]
finalJoy[weight]
finalJoy["count.low"]
finalJoy["count.highest"]
finalJoy["weight.low"]
finalJoy["weight.highest"]
sumlang <- finalJoy["weight.highest"] + finalJoy["weight.highest"]
sumlang
source('~/CIT-U/Masters of Computer Science/Capstone - Thesis/Emotions Detection and Analysis/EmoTector/R/FuzzySets.R')
emotionsCountFUnction <- function(finalJay) {
lahiNa <- c(count = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0), weight = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0))
lahiNa["count.highest"] <- finalJay["count.highest"]
lahiNa["weight.high"] <- finalJay["weight.high"]
return(lahiNa)
}
finalJ <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
emotionsCountFUnction(finalJ)
emotionsCountFUnction <- function(finalJay) {
lahiNa <- c(count = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0), weight = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0))
lahiNa["count.highest"] <- finalJay["count.highest"] + 10
lahiNa["weight.high"] <- finalJay["weight.high"] + 10
return(lahiNa)
}
finalJ <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
emotionsCountFUnction(finalJ)
shiny::runApp('R')
emotionsCountFUnction <- function(finalJay) {
lahiNa <- c(count = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0), weight = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0))
lahiNa["count.highest"] <- finalJay["count.highest"] + 10
lahiNa["weight.high"] <- finalJay["weight.high"] + 10
return(lahiNa)
}
finalJ <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
emotionsCountFUnction(finalJ)
emotionsCountFUnction(finalJ)
emotionsCountFUnction <- function(finalJay) {
# lahiNa <- c(count = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0), weight = c(lowest = 0, low = 0, neutral = 0, high = 0, higher = 0, highest = 0))
finalJay["count.highest"] <- finalJay["count.highest"] + 10
finalJay["weight.high"] <- finalJay["weight.high"] + 10
return(finalJay)
}
finalJ <- c(count = c(lowest = 0, low = 1, neutral = 2, high = 3, higher = 4, highest = 5), weight = c(lowest = 0.0, low = 0.2, neutral = 0.4, high = 0.6, higher = 0.8, highest = 1.0))
emotionsCountFUnction(finalJ)
emotionsCountFUnction(finalJ)
runApp('R')
